// Generated by gencpp from file imagelistener/exampleImageProcessing.msg
// DO NOT EDIT!


#ifndef IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSING_H
#define IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSING_H

#include <ros/service_traits.h>


#include <imagelistener/exampleImageProcessingRequest.h>
#include <imagelistener/exampleImageProcessingResponse.h>


namespace imagelistener
{

struct exampleImageProcessing
{

typedef exampleImageProcessingRequest Request;
typedef exampleImageProcessingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct exampleImageProcessing
} // namespace imagelistener


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::imagelistener::exampleImageProcessing > {
  static const char* value()
  {
    return "4df001eccb778b16252d267a56e427e0";
  }

  static const char* value(const ::imagelistener::exampleImageProcessing&) { return value(); }
};

template<>
struct DataType< ::imagelistener::exampleImageProcessing > {
  static const char* value()
  {
    return "imagelistener/exampleImageProcessing";
  }

  static const char* value(const ::imagelistener::exampleImageProcessing&) { return value(); }
};


// service_traits::MD5Sum< ::imagelistener::exampleImageProcessingRequest> should match 
// service_traits::MD5Sum< ::imagelistener::exampleImageProcessing > 
template<>
struct MD5Sum< ::imagelistener::exampleImageProcessingRequest>
{
  static const char* value()
  {
    return MD5Sum< ::imagelistener::exampleImageProcessing >::value();
  }
  static const char* value(const ::imagelistener::exampleImageProcessingRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::imagelistener::exampleImageProcessingRequest> should match 
// service_traits::DataType< ::imagelistener::exampleImageProcessing > 
template<>
struct DataType< ::imagelistener::exampleImageProcessingRequest>
{
  static const char* value()
  {
    return DataType< ::imagelistener::exampleImageProcessing >::value();
  }
  static const char* value(const ::imagelistener::exampleImageProcessingRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::imagelistener::exampleImageProcessingResponse> should match 
// service_traits::MD5Sum< ::imagelistener::exampleImageProcessing > 
template<>
struct MD5Sum< ::imagelistener::exampleImageProcessingResponse>
{
  static const char* value()
  {
    return MD5Sum< ::imagelistener::exampleImageProcessing >::value();
  }
  static const char* value(const ::imagelistener::exampleImageProcessingResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::imagelistener::exampleImageProcessingResponse> should match 
// service_traits::DataType< ::imagelistener::exampleImageProcessing > 
template<>
struct DataType< ::imagelistener::exampleImageProcessingResponse>
{
  static const char* value()
  {
    return DataType< ::imagelistener::exampleImageProcessing >::value();
  }
  static const char* value(const ::imagelistener::exampleImageProcessingResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSING_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imagelistener/ELVEZ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ELVEZ(genpy.Message):
  _md5sum = "091bb750addfb2a2d38be01aa4c9705f"
  _type = "imagelistener/ELVEZ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 detail_detected
int32 detail_ok
int32 operation_type
float32 measurement_mm
float32 angle_grad
int32 angle_axis

"""
  __slots__ = ['detail_detected','detail_ok','operation_type','measurement_mm','angle_grad','angle_axis']
  _slot_types = ['int32','int32','int32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detail_detected,detail_ok,operation_type,measurement_mm,angle_grad,angle_axis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ELVEZ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detail_detected is None:
        self.detail_detected = 0
      if self.detail_ok is None:
        self.detail_ok = 0
      if self.operation_type is None:
        self.operation_type = 0
      if self.measurement_mm is None:
        self.measurement_mm = 0.
      if self.angle_grad is None:
        self.angle_grad = 0.
      if self.angle_axis is None:
        self.angle_axis = 0
    else:
      self.detail_detected = 0
      self.detail_ok = 0
      self.operation_type = 0
      self.measurement_mm = 0.
      self.angle_grad = 0.
      self.angle_axis = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i2fi.pack(_x.detail_detected, _x.detail_ok, _x.operation_type, _x.measurement_mm, _x.angle_grad, _x.angle_axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.detail_detected, _x.detail_ok, _x.operation_type, _x.measurement_mm, _x.angle_grad, _x.angle_axis,) = _struct_3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i2fi.pack(_x.detail_detected, _x.detail_ok, _x.operation_type, _x.measurement_mm, _x.angle_grad, _x.angle_axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.detail_detected, _x.detail_ok, _x.operation_type, _x.measurement_mm, _x.angle_grad, _x.angle_axis,) = _struct_3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i2fi = struct.Struct("<3i2fi")

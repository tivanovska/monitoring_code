# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imagelistener/exampleImageProcessingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class exampleImageProcessingRequest(genpy.Message):
  _md5sum = "7d09356e32d35e9cf8ad6727899171a5"
  _type = "imagelistener/exampleImageProcessingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 ID_Template
int64 ID_Operation
"""
  __slots__ = ['ID_Template','ID_Operation']
  _slot_types = ['int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID_Template,ID_Operation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(exampleImageProcessingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID_Template is None:
        self.ID_Template = 0
      if self.ID_Operation is None:
        self.ID_Operation = 0
    else:
      self.ID_Template = 0
      self.ID_Operation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2q.pack(_x.ID_Template, _x.ID_Operation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ID_Template, _x.ID_Operation,) = _struct_2q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2q.pack(_x.ID_Template, _x.ID_Operation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ID_Template, _x.ID_Operation,) = _struct_2q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q = struct.Struct("<2q")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imagelistener/exampleImageProcessingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import imagelistener.msg

class exampleImageProcessingResponse(genpy.Message):
  _md5sum = "15998bf28933738af525a0f9b973e59a"
  _type = "imagelistener/exampleImageProcessingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 Im_Width
int64 Im_Height
ELVEZ Mon_result


================================================================================
MSG: imagelistener/ELVEZ
int32 detail_detected
int32 detail_ok
int32 operation_type
float32 measurement_mm
float32 angle_grad
int32 angle_axis

"""
  __slots__ = ['Im_Width','Im_Height','Mon_result']
  _slot_types = ['int64','int64','imagelistener/ELVEZ']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Im_Width,Im_Height,Mon_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(exampleImageProcessingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Im_Width is None:
        self.Im_Width = 0
      if self.Im_Height is None:
        self.Im_Height = 0
      if self.Mon_result is None:
        self.Mon_result = imagelistener.msg.ELVEZ()
    else:
      self.Im_Width = 0
      self.Im_Height = 0
      self.Mon_result = imagelistener.msg.ELVEZ()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2q3i2fi.pack(_x.Im_Width, _x.Im_Height, _x.Mon_result.detail_detected, _x.Mon_result.detail_ok, _x.Mon_result.operation_type, _x.Mon_result.measurement_mm, _x.Mon_result.angle_grad, _x.Mon_result.angle_axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Mon_result is None:
        self.Mon_result = imagelistener.msg.ELVEZ()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.Im_Width, _x.Im_Height, _x.Mon_result.detail_detected, _x.Mon_result.detail_ok, _x.Mon_result.operation_type, _x.Mon_result.measurement_mm, _x.Mon_result.angle_grad, _x.Mon_result.angle_axis,) = _struct_2q3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2q3i2fi.pack(_x.Im_Width, _x.Im_Height, _x.Mon_result.detail_detected, _x.Mon_result.detail_ok, _x.Mon_result.operation_type, _x.Mon_result.measurement_mm, _x.Mon_result.angle_grad, _x.Mon_result.angle_axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Mon_result is None:
        self.Mon_result = imagelistener.msg.ELVEZ()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.Im_Width, _x.Im_Height, _x.Mon_result.detail_detected, _x.Mon_result.detail_ok, _x.Mon_result.operation_type, _x.Mon_result.measurement_mm, _x.Mon_result.angle_grad, _x.Mon_result.angle_axis,) = _struct_2q3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q3i2fi = struct.Struct("<2q3i2fi")
class exampleImageProcessing(object):
  _type          = 'imagelistener/exampleImageProcessing'
  _md5sum = '4df001eccb778b16252d267a56e427e0'
  _request_class  = exampleImageProcessingRequest
  _response_class = exampleImageProcessingResponse

// Generated by gencpp from file imagelistener/ELVEZ.msg
// DO NOT EDIT!


#ifndef IMAGELISTENER_MESSAGE_ELVEZ_H
#define IMAGELISTENER_MESSAGE_ELVEZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imagelistener
{
template <class ContainerAllocator>
struct ELVEZ_
{
  typedef ELVEZ_<ContainerAllocator> Type;

  ELVEZ_()
    : detail_detected(0)
    , detail_ok(0)
    , operation_type(0)
    , measurement_mm(0.0)
    , angle_grad(0.0)
    , angle_axis(0)  {
    }
  ELVEZ_(const ContainerAllocator& _alloc)
    : detail_detected(0)
    , detail_ok(0)
    , operation_type(0)
    , measurement_mm(0.0)
    , angle_grad(0.0)
    , angle_axis(0)  {
  (void)_alloc;
    }



   typedef int32_t _detail_detected_type;
  _detail_detected_type detail_detected;

   typedef int32_t _detail_ok_type;
  _detail_ok_type detail_ok;

   typedef int32_t _operation_type_type;
  _operation_type_type operation_type;

   typedef float _measurement_mm_type;
  _measurement_mm_type measurement_mm;

   typedef float _angle_grad_type;
  _angle_grad_type angle_grad;

   typedef int32_t _angle_axis_type;
  _angle_axis_type angle_axis;




  typedef boost::shared_ptr< ::imagelistener::ELVEZ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imagelistener::ELVEZ_<ContainerAllocator> const> ConstPtr;

}; // struct ELVEZ_

typedef ::imagelistener::ELVEZ_<std::allocator<void> > ELVEZ;

typedef boost::shared_ptr< ::imagelistener::ELVEZ > ELVEZPtr;
typedef boost::shared_ptr< ::imagelistener::ELVEZ const> ELVEZConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imagelistener::ELVEZ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imagelistener::ELVEZ_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imagelistener

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'imagelistener': ['/home/tiva/catkin_ws/src/imagelistener/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imagelistener::ELVEZ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imagelistener::ELVEZ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imagelistener::ELVEZ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imagelistener::ELVEZ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagelistener::ELVEZ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagelistener::ELVEZ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imagelistener::ELVEZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "091bb750addfb2a2d38be01aa4c9705f";
  }

  static const char* value(const ::imagelistener::ELVEZ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x091bb750addfb2a2ULL;
  static const uint64_t static_value2 = 0xd38be01aa4c9705fULL;
};

template<class ContainerAllocator>
struct DataType< ::imagelistener::ELVEZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imagelistener/ELVEZ";
  }

  static const char* value(const ::imagelistener::ELVEZ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imagelistener::ELVEZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 detail_detected\n\
int32 detail_ok\n\
int32 operation_type\n\
float32 measurement_mm\n\
float32 angle_grad\n\
int32 angle_axis\n\
\n\
";
  }

  static const char* value(const ::imagelistener::ELVEZ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imagelistener::ELVEZ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detail_detected);
      stream.next(m.detail_ok);
      stream.next(m.operation_type);
      stream.next(m.measurement_mm);
      stream.next(m.angle_grad);
      stream.next(m.angle_axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ELVEZ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imagelistener::ELVEZ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imagelistener::ELVEZ_<ContainerAllocator>& v)
  {
    s << indent << "detail_detected: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detail_detected);
    s << indent << "detail_ok: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detail_ok);
    s << indent << "operation_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.operation_type);
    s << indent << "measurement_mm: ";
    Printer<float>::stream(s, indent + "  ", v.measurement_mm);
    s << indent << "angle_grad: ";
    Printer<float>::stream(s, indent + "  ", v.angle_grad);
    s << indent << "angle_axis: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGELISTENER_MESSAGE_ELVEZ_H

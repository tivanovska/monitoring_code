// Generated by gencpp from file imagelistener/exampleImageProcessingResponse.msg
// DO NOT EDIT!


#ifndef IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSINGRESPONSE_H
#define IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imagelistener/ELVEZ.h>

namespace imagelistener
{
template <class ContainerAllocator>
struct exampleImageProcessingResponse_
{
  typedef exampleImageProcessingResponse_<ContainerAllocator> Type;

  exampleImageProcessingResponse_()
    : Im_Width(0)
    , Im_Height(0)
    , Mon_result()  {
    }
  exampleImageProcessingResponse_(const ContainerAllocator& _alloc)
    : Im_Width(0)
    , Im_Height(0)
    , Mon_result(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _Im_Width_type;
  _Im_Width_type Im_Width;

   typedef int64_t _Im_Height_type;
  _Im_Height_type Im_Height;

   typedef  ::imagelistener::ELVEZ_<ContainerAllocator>  _Mon_result_type;
  _Mon_result_type Mon_result;




  typedef boost::shared_ptr< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct exampleImageProcessingResponse_

typedef ::imagelistener::exampleImageProcessingResponse_<std::allocator<void> > exampleImageProcessingResponse;

typedef boost::shared_ptr< ::imagelistener::exampleImageProcessingResponse > exampleImageProcessingResponsePtr;
typedef boost::shared_ptr< ::imagelistener::exampleImageProcessingResponse const> exampleImageProcessingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imagelistener

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'imagelistener': ['/home/tiva/catkin_ws/src/imagelistener/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15998bf28933738af525a0f9b973e59a";
  }

  static const char* value(const ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15998bf28933738aULL;
  static const uint64_t static_value2 = 0xf525a0f9b973e59aULL;
};

template<class ContainerAllocator>
struct DataType< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imagelistener/exampleImageProcessingResponse";
  }

  static const char* value(const ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Im_Width\n\
int64 Im_Height\n\
ELVEZ Mon_result\n\
\n\
\n\
================================================================================\n\
MSG: imagelistener/ELVEZ\n\
int32 detail_detected\n\
int32 detail_ok\n\
int32 operation_type\n\
float32 measurement_mm\n\
float32 angle_grad\n\
int32 angle_axis\n\
\n\
";
  }

  static const char* value(const ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Im_Width);
      stream.next(m.Im_Height);
      stream.next(m.Mon_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct exampleImageProcessingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imagelistener::exampleImageProcessingResponse_<ContainerAllocator>& v)
  {
    s << indent << "Im_Width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Im_Width);
    s << indent << "Im_Height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Im_Height);
    s << indent << "Mon_result: ";
    s << std::endl;
    Printer< ::imagelistener::ELVEZ_<ContainerAllocator> >::stream(s, indent + "  ", v.Mon_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGELISTENER_MESSAGE_EXAMPLEIMAGEPROCESSINGRESPONSE_H
